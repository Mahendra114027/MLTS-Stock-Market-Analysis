# -*- coding: utf-8 -*-
"""arima.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18LSmIQDvbEQ5yeGrArub2RoMKsqNw1eA
"""

import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
from pylab import rcParams
rcParams['figure.figsize'] = 10, 6
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
from pmdarima.arima import auto_arima
from sklearn.metrics import mean_squared_error, mean_absolute_error

class ARIMA(Model):
    """
    ARIMA model class
    """
    
    def __init__(self):
        super().__init__()
        self._model = None
        np.random.seed(42)
    
    def fit(self, df, **kwargs):
        
        # Split the data into training and testing sets
       
        # Create the training and testing sets
        train_data, test_data = df[0:int(len(df)*0.8)], df[int(len(df)*0.8):]
        
        
        # Build the LSTM model
        model_autoARIMA = auto_arima(train_data['adj_close'], start_p=0, start_q=0,
                      test='adf',       # use adftest to find optimal 'd'
                      max_p=5, max_q=5, # maximum p and q
                      m=1,              # frequency of series
                      d=None,           # let model determine 'd'
                      seasonal=False,   # No Seasonality
                      start_P=0, 
                      D=0, 
                      trace=True,
                      error_action='ignore',  
                      suppress_warnings=True, 
                      stepwise=True)
        print(model_autoARIMA.summary())
        model_autoARIMA.plot_diagnostics(figsize=(15,8))
        plt.show()
        
        # Compile and train the self._model
        # Make predictions on the test data
        train = train_data['adj_close'].values
        test = test_data['adj_close'].values

        history = [x for x in train]
        print(type(history))
        predictions = list()
        for i in range(len(test)):
            model = ARIMA(history, order=(3,1,0))
            model_fit = model.fit()
            output = model_fit.forecast()
            yhat = output[0]
            predictions.append(yhat)
            obs = test[i]
            history.append(obs)
        
                
        # Evaluate the model
        error = mean_squared_error(test, predictions)
        print('Testing Mean Squared Error: %.3f' % error)

        # Save the model
        save_model(self._model, 'ARIMA')
    
    def predict(self, data, **kwargs):
        pass